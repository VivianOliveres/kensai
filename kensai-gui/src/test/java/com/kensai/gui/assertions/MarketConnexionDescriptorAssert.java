package com.kensai.gui.assertions;

import org.assertj.core.api.AbstractAssert;

import com.kensai.gui.xml.MarketConnexionDescriptor;

// Assertions is needed if an assertion for Iterable is generated


/**
 * {@link MarketConnexionDescriptor} specific assertions - Generated by CustomAssertionGenerator.
 */
public class MarketConnexionDescriptorAssert extends AbstractAssert<MarketConnexionDescriptorAssert, MarketConnexionDescriptor> {

  /**
   * Creates a new </code>{@link MarketConnexionDescriptorAssert}</code> to make assertions on actual MarketConnexionDescriptor.
   * @param actual the MarketConnexionDescriptor we want to make assertions on.
   */
  public MarketConnexionDescriptorAssert(MarketConnexionDescriptor actual) {
    super(actual, MarketConnexionDescriptorAssert.class);
  }

  /**
   * An entry point for MarketConnexionDescriptorAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myMarketConnexionDescriptor)</code> and get specific assertion with code completion.
   * @param actual the MarketConnexionDescriptor we want to make assertions on.
   * @return a new </code>{@link MarketConnexionDescriptorAssert}</code>
   */
  public static MarketConnexionDescriptorAssert assertThat(MarketConnexionDescriptor actual) {
    return new MarketConnexionDescriptorAssert(actual);
  }

  /**
   * Verifies that the actual MarketConnexionDescriptor is connectingAtStartup.
   * @return this assertion object.
   * @throws AssertionError - if the actual MarketConnexionDescriptor is not connectingAtStartup.
   */
  public MarketConnexionDescriptorAssert isConnectingAtStartup() {
    // check that actual MarketConnexionDescriptor we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isConnectingAtStartup()) {
      failWithMessage("\nExpected actual MarketConnexionDescriptor to be connectingAtStartup but was not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual MarketConnexionDescriptor is not connectingAtStartup.
   * @return this assertion object.
   * @throws AssertionError - if the actual MarketConnexionDescriptor is connectingAtStartup.
   */
  public MarketConnexionDescriptorAssert isNotConnectingAtStartup() {
    // check that actual MarketConnexionDescriptor we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isConnectingAtStartup()) {
      failWithMessage("\nExpected actual MarketConnexionDescriptor not to be connectingAtStartup but was.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual MarketConnexionDescriptor's connectionName is equal to the given one.
   * @param connectionName the given connectionName to compare the actual MarketConnexionDescriptor's connectionName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MarketConnexionDescriptor's connectionName is not equal to the given one.
   */
  public MarketConnexionDescriptorAssert hasConnectionName(String connectionName) {
    // check that actual MarketConnexionDescriptor we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected connectionName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualConnectionName = actual.getConnectionName();
    if (!org.assertj.core.util.Objects.areEqual(actualConnectionName, connectionName)) {
      failWithMessage(assertjErrorMessage, actual, connectionName, actualConnectionName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual MarketConnexionDescriptor's host is equal to the given one.
   * @param host the given host to compare the actual MarketConnexionDescriptor's host to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MarketConnexionDescriptor's host is not equal to the given one.
   */
  public MarketConnexionDescriptorAssert hasHost(String host) {
    // check that actual MarketConnexionDescriptor we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected host of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualHost = actual.getHost();
    if (!org.assertj.core.util.Objects.areEqual(actualHost, host)) {
      failWithMessage(assertjErrorMessage, actual, host, actualHost);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual MarketConnexionDescriptor's port is equal to the given one.
   * @param port the given port to compare the actual MarketConnexionDescriptor's port to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MarketConnexionDescriptor's port is not equal to the given one.
   */
  public MarketConnexionDescriptorAssert hasPort(int port) {
    // check that actual MarketConnexionDescriptor we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected port of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualPort = actual.getPort();
    if (actualPort != port) {
      failWithMessage(assertjErrorMessage, actual, port, actualPort);
    }

    // return the current assertion for method chaining
    return this;
  }

}
