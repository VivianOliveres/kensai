package com.kensai.gui.assertions;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated
import org.assertj.core.api.Assertions;

import com.kensai.gui.xml.MarketConnexionDescriptor;
import com.kensai.gui.xml.MarketConnexionDescriptors;

/**
 * {@link MarketConnexionDescriptors} specific assertions - Generated by CustomAssertionGenerator.
 */
public class MarketConnexionDescriptorsAssert extends AbstractAssert<MarketConnexionDescriptorsAssert, MarketConnexionDescriptors> {

  /**
   * Creates a new </code>{@link MarketConnexionDescriptorsAssert}</code> to make assertions on actual MarketConnexionDescriptors.
   * @param actual the MarketConnexionDescriptors we want to make assertions on.
   */
  public MarketConnexionDescriptorsAssert(MarketConnexionDescriptors actual) {
    super(actual, MarketConnexionDescriptorsAssert.class);
  }

  /**
   * An entry point for MarketConnexionDescriptorsAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myMarketConnexionDescriptors)</code> and get specific assertion with code completion.
   * @param actual the MarketConnexionDescriptors we want to make assertions on.
   * @return a new </code>{@link MarketConnexionDescriptorsAssert}</code>
   */
  public static MarketConnexionDescriptorsAssert assertThat(MarketConnexionDescriptors actual) {
    return new MarketConnexionDescriptorsAssert(actual);
  }

  /**
   * Verifies that the actual MarketConnexionDescriptors's connexions contains the given MarketConnexionDescriptor elements.
   * @param connexions the given elements that should be contained in actual MarketConnexionDescriptors's connexions.
   * @return this assertion object.
   * @throws AssertionError if the actual MarketConnexionDescriptors's connexions does not contain all given MarketConnexionDescriptor elements.
   */
  public MarketConnexionDescriptorsAssert hasConnexions(MarketConnexionDescriptor... connexions) {
    // check that actual MarketConnexionDescriptors we want to make assertions on is not null.
    isNotNull();

    // check that given MarketConnexionDescriptor varargs is not null.
    if (connexions == null) throw new AssertionError("Expecting connexions parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getConnexions()).contains(connexions);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getConnexions().contains(connexions)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getConnexions()).overridingErrorMessage("\nmy error message %s", "arg1").contains(connexions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual MarketConnexionDescriptors has no connexions.
   * @return this assertion object.
   * @throws AssertionError if the actual MarketConnexionDescriptors's connexions is not empty.
   */
  public MarketConnexionDescriptorsAssert hasNoConnexions() {
    // check that actual MarketConnexionDescriptors we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have connexions but had :\n  <%s>";
    
    // check
    if (!actual.getConnexions().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getConnexions());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

}
